<?xml version="1.0"?>
<document>

    <properties>
        <author email="tirsen@users.sourceforge.net">Jon Tirsen</author>
        <title>Nanning Aspects</title>
    </properties>

    <body>

        <section name="On method-selectors">
            <p>
                Method-selectors are regex-patterns that are used to select what method an interceptor
                will be applied to. I haven't yet found a use for method-selectors and therefor they are
                not yet implemented it in Nanning.
            </p>
            <p>
                This is how I do it. My TransactionInterceptor will check an attribute of the method
                that specifies wheather it requires transactions or not. Using method-selectors that
                say "always have transactions for methods starting with 'set' or 'update', ie.
                'set* | update*'" is error-prone because you may have other methods like "moveTo",
                "checkout" or "create" that do not follow this convention but still requires
                transactions, or the other way around which is as bad because it will result in a
                serious performance-hit. This forces you to do one of two
                things: always follow your specified method-naming-pattern or have a very complex
                method-selector. Neither of these work-arounds are satisfactory. That's why I use
                runtime-attributes instead of method-naming-conventions together with method-selectors.
            </p>
            <p>
                There can sometimes also be a performance-gain in not executing unneeded interceptors.
                This performance-gain can not be accomplished by using attributes. But there are some problems
                with implementing method-selectors that can also affect performance. How do you implement
                method-selectors? Either one needs to check the selector at runtime which will be too slow.
                The other way is to cache the result of these checks when defining the aspect-class.
                This is also problematic because it could result in increased footprint.
                There may be other ways of implementing this, but I don't see them.
            </p>
            <p>
                This is a subject currently under investigation and I haven't really decided what I
                think. For example another way (which feels better) is to have method-selectors based
                on runtime attributes which seems to be a more stable approach than by letting the
                method-name (the actual text) carry heavy loads of semantics. How to specify these
                selectors is yet to be determined. One way would be to use the same approach as the
                JBoss Aspect-implementation, let the interceptor for itself determine what methods it is
                interested in intercepting.
            </p>
            <p>
                Maybe this discussion really belongs on my
                <a href="http://www.freeroller.net/page/tirsen">blog</a>...?
            </p>
        </section>

    </body>
</document>
